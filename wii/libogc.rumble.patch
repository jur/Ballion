Index: gc/wiiuse/wpad.h
===================================================================
RCS file: /cvsroot/devkitpro/libogc/gc/wiiuse/wpad.h,v
retrieving revision 1.13
diff -u -r1.13 wpad.h
--- gc/wiiuse/wpad.h	26 May 2008 16:06:47 -0000	1.13
+++ gc/wiiuse/wpad.h	27 May 2008 21:27:23 -0000
@@ -120,6 +120,7 @@
 u32 WPAD_ButtonsUp(int pad);
 u32 WPAD_ButtonsDown(int pad);
 u32 WPAD_ButtonsHeld(int pad);
+s32 WPAD_Rumble(s32 chan, int on);
 
 #ifdef __cplusplus
    }
Index: wiiuse/wpad.c
===================================================================
RCS file: /cvsroot/devkitpro/libogc/wiiuse/wpad.c,v
retrieving revision 1.28
diff -u -r1.28 wpad.c
--- wiiuse/wpad.c	26 May 2008 19:24:53 -0000	1.28
+++ wiiuse/wpad.c	27 May 2008 21:27:24 -0000
@@ -494,6 +494,34 @@
 	return ret;
 }
 
+s32 WPAD_Rumble(s32 chan, int on)
+{
+	s32 ret;
+	u32 level;
+	wiimote *wm = NULL;
+
+	if(chan<WPAD_CHAN_0 || chan>WPAD_CHAN_3) return WPAD_ERR_NO_CONTROLLER;
+
+	_CPU_ISR_Disable(level);
+	if(__wpads_inited==WPAD_STATE_DISABLED) {
+		_CPU_ISR_Restore(level);
+		return WPAD_ERR_NOT_READY;
+	}
+
+	wm = __wpads[chan];
+	if(wm && WIIMOTE_IS_SET(wm,WIIMOTE_STATE_CONNECTED)) {
+		if(WIIMOTE_IS_SET(wm,WIIMOTE_STATE_HANDSHAKE_COMPLETE)) {
+			wiiuse_rumble(wm, on);
+			ret = WPAD_ERR_NONE;
+		} else
+			ret = WPAD_ERR_NOT_READY;
+	} else
+		ret = WPAD_ERR_NO_CONTROLLER;
+	_CPU_ISR_Restore(level);
+
+	return ret;
+}
+
 wpadsamplingcallback WPAD_SetSamplingCallback(s32 chan,wpadsamplingcallback cb)
 {
 	u32 level;
